-- Create Users table
CREATE TABLE Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,
    password VARCHAR(255)
);
app.use(bodyParser.json());

// Basic error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send({ error: 'Something went wrong!' });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql');
const bcrypt = require('bcryptjs');

app = express();
const port = 3000;

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// MySQL Connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'yourusername',
  password: 'yourpassword',
  database: 'yourdatabase'
});

// Connect to MySQL
db.connect((err) => {
  if (err) {
    throw err;
  }
  console.log('Connected to MySQL database');
});

// Routes

// User Registration
app.post('/register', (req, res) => {
  const { username, password } = req.body;
  
  bcrypt.hash(password, 10, (err, hashedPassword) => {
    if (err) throw err;
    
    db.query('INSERT INTO Users (username, password) VALUES (?, ?)', [username, hashedPassword], (err, result) => {
      if (err) {
        res.status(500).send('Error registering user');
      } else {
        res.status(201).send('User registered successfully');
      }
    });
  });
});

// User Login
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM Users WHERE username = ?', username, (err, results) => {
    if (err) throw err;

    if (results.length > 0) {
      const user = results[0];
      
      bcrypt.compare(password, user.password, (err, match) => {
        if (err) throw err;

        if (match) {
          res.status(200).send('Login successful');
        } else {
          res.status(401).send('Invalid credentials');
        }
      });
    } else {
      res.status(404).send('User not found');
    }
  });
});

// Add Expense
app.post('/expenses', (req, res) => {
  const { user_id, amount, date, category } = req.body;

  db.query('INSERT INTO Expenses (user_id, amount, date, category) VALUES (?, ?, ?, ?)', [user_id, amount, date, category], (err, result) => {
    if (err) {
      res.status(500).send('Error adding expense');
    } else {
      res.status(201).send('Expense added successfully');
    }
  });
});

// View Expenses
app.get('/expenses/:user_id', (req, res) => {
  const { user_id } = req.params;

  db.query('SELECT * FROM Expenses WHERE user_id = ?', user_id, (err, results) => {
    if (err) {
      res.status(500).send('Error fetching expenses');
    } else {
      res.status(200).json(results);
    }
  });
});

// Start server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});